# ui.py
"""
GUI –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è User Creator –Ω–∞ –æ—Å–Ω–æ–≤–µ PyQt5.
"""
import sys
import os
from typing import List, Dict, Optional
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
    QLabel, QRadioButton, QLineEdit, QPushButton, QFileDialog, QTextEdit,
    QProgressBar, QGroupBox, QMessageBox, QCheckBox, QScrollArea, QFrame, QSizePolicy
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings
from PyQt5.QtGui import QTextCursor, QFont

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    from config_loader import CONFIG
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AD –æ–ø–µ—Ä–∞—Ü–∏–∏
    from ad_operations import connect_to_ad, get_domain_guid
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É CSV
    from csv_processing import find_csv_files, process_user_row
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é XML
    from xml_generation import generate_sysconfig_xml, generate_energy_xml
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    from logging_config import LogManager
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from csv_processing import get_file_encoding, read_csv_file, write_csv_file
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AD —Ñ—É–Ω–∫—Ü–∏–∏
    from ad_operations import get_user_guid
    
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏: {e}")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config
SYSCONFIG_SUFFIX = CONFIG['output']['sysconfig_xml_suffix']
ENERGY_SUFFIX = CONFIG['output']['energy_xml_suffix']
NOT_IN_AD_CSV = CONFIG['output']['not_in_ad_csv']
AD_ENABLED = CONFIG['ad']['enabled']


class Worker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    log_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal()
    error_signal = pyqtSignal(str)
    
    def __init__(self, mode, ad_password, manual_guid, input_dir):
        super().__init__()
        self.mode = mode
        self.ad_password = ad_password
        self.manual_guid = manual_guid
        self.input_dir = input_dir
        
    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            original_dir = os.getcwd()
            if self.input_dir and os.path.exists(self.input_dir):
                os.chdir(self.input_dir)
                
            self.log_signal.emit(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.getcwd()}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AD (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            ad_conn = None
            ad_guid = None
            not_found_in_ad = []
            
            if self.mode == 'y' and AD_ENABLED:
                if not self.ad_password:
                    self.log_signal.emit("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å AD!")
                    return
                self.log_signal.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Active Directory...")
                ad_conn = connect_to_ad(self.ad_password)
                if not ad_conn:
                    self.log_signal.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AD.")
                    return
                self.log_signal.emit("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AD")
                
                self.log_signal.emit("–ü–æ–ª—É—á–µ–Ω–∏–µ GUID –¥–æ–º–µ–Ω–∞...")
                ad_guid = get_domain_guid(ad_conn)
                if not ad_guid:
                    self.log_signal.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GUID –¥–æ–º–µ–Ω–∞.")
                    return
                self.log_signal.emit(f"‚úÖ GUID –¥–æ–º–µ–Ω–∞: {ad_guid}")
            else:
                if not self.manual_guid:
                    self.log_signal.emit("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω GUID –¥–æ–º–µ–Ω–∞!")
                    return
                ad_guid = self.manual_guid.strip()
                self.log_signal.emit(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GUID: {ad_guid}")
                
            self.progress_signal.emit(20)
            self.log_signal.emit("–ü–æ–∏—Å–∫ CSV —Ñ–∞–π–ª–æ–≤...")
            
            csv_files = find_csv_files()
            if not csv_files:
                self.log_signal.emit("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                return
                
            self.log_signal.emit(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(csv_files)}")
            
            self.progress_signal.emit(30)
            total_files = len(csv_files)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            for i, csv_file in enumerate(csv_files):
                self.log_signal.emit(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {csv_file}")
                
                try:
                    file_path = os.path.join('.', csv_file)
                    base_name = os.path.splitext(csv_file)[0]
                    
                    # –°–æ–∑–¥–∞—ë–º LogManager –∏ –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
                    log_manager = LogManager(csv_file)
                    logger = log_manager.get_logger()
                    logger.info(f"üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {csv_file}")
                    
                    if self.mode == 'y' and AD_ENABLED:
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GUID –¥–æ–º–µ–Ω–∞ –∏–∑ AD: {ad_guid}")
                    else:
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω—ã–π GUID –¥–æ–º–µ–Ω–∞: {ad_guid}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —á—Ç–µ–Ω–∏–µ CSV
                    encoding = get_file_encoding(file_path)
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}")
                    rows = read_csv_file(file_path, encoding)
                    logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
                    
                    updated_rows = []
                    users_data = []
                    
                                        # ...
                    for row_idx, row in enumerate(rows):
                        name = (row.get('name') or '').strip()
                        if not name:
                            logger.debug(f"–°—Ç—Ä–æ–∫–∞ {row_idx + 1}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ø—É—Å—Ç–æ–µ –∏–º—è)")
                            continue
                            
                        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                        processed_row = process_user_row(
                            row,           # row
                            row_idx,       # row_index
                            csv_file,      # csv_file
                            self.mode,     # mode
                            ad_conn,       # ad_conn
                            ad_guid,       # ad_guid
                            not_found_in_ad, # not_found_in_ad
                            logger         # logger
                        )
                        # ...
                        
                        
                            
                            
                            
                        
                        if processed_row:
                            updated_rows.append(processed_row)
                            users_data.append(processed_row)
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML
                    sys_xml = generate_sysconfig_xml(ad_guid, users_data)
                    energy_xml = generate_energy_xml(users_data)
                    with open(f"{base_name}{SYSCONFIG_SUFFIX}", 'w', encoding='utf-8') as f:
                        f.write(sys_xml)
                    with open(f"{base_name}{ENERGY_SUFFIX}", 'w', encoding='utf-8') as f:
                        f.write(energy_xml)
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã XML-—Ñ–∞–π–ª—ã: "
                               f"{base_name}{SYSCONFIG_SUFFIX}, {base_name}{ENERGY_SUFFIX}")
                    
                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å CSV
                    write_csv_file(file_path, updated_rows)
                    logger.info(f"‚úÖ CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {csv_file}")
                    
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ '{csv_file}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    
                except Exception as e:
                    self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {csv_file}: {str(e)}")
                    continue
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = 30 + int((i + 1) / total_files * 60)
                self.progress_signal.emit(progress)
                
            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ not_in_AD.csv ---
            if self.mode == 'y' and AD_ENABLED and not_found_in_ad:
                try:
                    not_found_in_ad.sort(key=lambda x: x['login'])
                    with open(NOT_IN_AD_CSV, 'w', newline='', encoding='utf-8') as f:
                        import csv
                        writer = csv.DictWriter(f, fieldnames=['login', 'name', 'person_guid'], delimiter=';')
                        writer.writeheader()
                        writer.writerows(not_found_in_ad)
                    if csv_files:
                        last_logger = logger  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–≥–µ—Ä
                        last_logger.warning(f"üü° –õ–æ–≥–∏–Ω—ã –Ω–µ –∏–∑ AD —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {NOT_IN_AD_CSV}")
                    self.log_signal.emit(f"‚úÖ –õ–æ–≥–∏–Ω—ã –Ω–µ –∏–∑ AD —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {NOT_IN_AD_CSV}")
                except Exception as e:
                    if csv_files:
                        last_logger = logger
                        last_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {NOT_IN_AD_CSV}: {e}")
                    self.log_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {NOT_IN_AD_CSV}: {e}")
            
            self.log_signal.emit("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.progress_signal.emit(100)
            self.finished_signal.emit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(original_dir)
            
        except Exception as e:
            self.error_signal.emit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.finished_signal.emit()


class UserCreatorWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.settings = QSettings('UserCreator', 'GUI')
        self.worker = None
        self.init_ui()
        self.load_settings()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.setWindowTitle("User Creator GUI")
        self.setGeometry(100, 100, 900, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        
        # --- –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        settings_layout = QVBoxLayout(settings_group)
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode_layout = QHBoxLayout()
        mode_layout.addWidget(QLabel("–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:"))
        self.radio_ad = QRadioButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AD")
        self.radio_manual = QRadioButton("–ë–µ–∑ AD (–≤—Ä—É—á–Ω—É—é)")
        self.radio_manual.setChecked(True)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not AD_ENABLED:
            self.radio_ad.setEnabled(False)
            self.radio_ad.setToolTip("AD –æ—Ç–∫–ª—é—á–µ–Ω –≤ config.json")
            
        mode_layout.addWidget(self.radio_ad)
        mode_layout.addWidget(self.radio_manual)
        mode_layout.addStretch()
        settings_layout.addLayout(mode_layout)
        
        # –ü–æ–ª—è –¥–ª—è AD
        self.ad_widget = QFrame()
        self.ad_widget.setFrameStyle(QFrame.StyledPanel)
        ad_layout = QFormLayout(self.ad_widget)
        
        self.ad_password_edit = QLineEdit()
        self.ad_password_edit.setEchoMode(QLineEdit.Password)
        ad_layout.addRow("–ü–∞—Ä–æ–ª—å AD:", self.ad_password_edit)
        
        settings_layout.addWidget(self.ad_widget)
        
        # –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ GUID
        self.manual_guid_widget = QFrame()
        self.manual_guid_widget.setFrameStyle(QFrame.StyledPanel)
        manual_guid_layout = QFormLayout(self.manual_guid_widget)
        
        self.manual_guid_edit = QLineEdit()
        manual_guid_layout.addRow("GUID –¥–æ–º–µ–Ω–∞:", self.manual_guid_edit)
        
        settings_layout.addWidget(self.manual_guid_widget)
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs_layout = QFormLayout()
        
        dir_input_layout = QHBoxLayout()
        self.input_dir_edit = QLineEdit(".")
        self.browse_input_button = QPushButton("–û–±–∑–æ—Ä...")
        self.browse_input_button.clicked.connect(self.browse_input_directory)
        dir_input_layout.addWidget(self.input_dir_edit)
        dir_input_layout.addWidget(self.browse_input_button)
        dirs_layout.addRow("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å CSV:", dir_input_layout)
        
        settings_layout.addLayout(dirs_layout)
        
        main_layout.addWidget(settings_group)
        
        # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---
        self.run_button = QPushButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        self.run_button.clicked.connect(self.run_processing)
        self.run_button.setStyleSheet("font-weight: bold; padding: 10px;")
        main_layout.addWidget(self.run_button)
        
        # --- –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏ ---
        progress_group = QGroupBox("–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏")
        progress_layout = QVBoxLayout(progress_group)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        progress_layout.addWidget(self.progress_bar)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_container = QWidget()
        log_layout = QVBoxLayout(log_container)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
        font = QFont("Courier New")
        font.setPointSize(9)
        self.log_text.setFont(font)
        
        log_layout.addWidget(self.log_text)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(log_container)
        scroll_area.setMinimumHeight(300)
        
        progress_layout.addWidget(scroll_area)
        
        main_layout.addWidget(progress_group)
        
        # --- –°—Ç–∞—Ç—É—Å –±–∞—Ä ---
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        self.radio_ad.toggled.connect(self.on_mode_change)
        self.radio_manual.toggled.connect(self.on_mode_change)
        self.on_mode_change()
        
    def on_mode_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
        if self.radio_ad.isChecked():
            self.ad_widget.setVisible(True)
            self.manual_guid_widget.setVisible(False)
        else:
            self.ad_widget.setVisible(False)
            self.manual_guid_widget.setVisible(True)
            
    def browse_input_directory(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        dir_path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å CSV")
        if dir_path:
            self.input_dir_edit.setText(dir_path)
            
    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥."""
        self.log_text.append(message)
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        self.log_text.moveCursor(QTextCursor.End)
        
    def run_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()
        
        mode = 'y' if self.radio_ad.isChecked() else 'n'
        ad_password = self.ad_password_edit.text()
        manual_guid = self.manual_guid_edit.text()
        input_dir = self.input_dir_edit.text()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if mode == 'y' and AD_ENABLED and not ad_password:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å AD.")
            return
            
        if mode == 'n' or not AD_ENABLED:
            if not manual_guid:
                QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ GUID –¥–æ–º–µ–Ω–∞.")
                return
                
        if not input_dir or not os.path.exists(input_dir):
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å CSV —Ñ–∞–π–ª–∞–º–∏.")
            return
            
        self.run_button.setEnabled(False)
        self.statusBar().showMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
        self.progress_bar.setValue(0)
        self.log_text.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.worker = Worker(mode, ad_password, manual_guid, input_dir)
        self.worker.log_signal.connect(self.log_message)
        self.worker.progress_signal.connect(self.progress_bar.setValue)
        self.worker.finished_signal.connect(self.on_processing_finished)
        self.worker.error_signal.connect(self.on_processing_error)
        self.worker.start()
        
    def on_processing_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        self.run_button.setEnabled(True)
        self.statusBar().showMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.log_message("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
        
    def on_processing_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        self.run_button.setEnabled(True)
        self.statusBar().showMessage("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä."""
        self.settings.setValue("mode", 'y' if self.radio_ad.isChecked() else 'n')
        self.settings.setValue("input_dir", self.input_dir_edit.text())
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞."""
        mode = self.settings.value("mode", 'n')
        if mode == 'y' and AD_ENABLED:
            self.radio_ad.setChecked(True)
        else:
            self.radio_manual.setChecked(True)
            
        input_dir = self.settings.value("input_dir", ".")
        self.input_dir_edit.setText(input_dir)
        
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        if self.worker and self.worker.isRunning():
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞",
                "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.worker.terminate()
                self.worker.wait()
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()


def main():
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è
    app.setStyle("Fusion")
    
    window = UserCreatorWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()