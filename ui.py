# ui.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º)
"""
GUI –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è User Creator –Ω–∞ –æ—Å–Ω–æ–≤–µ PyQt5 —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.
"""
import sys
import os
from typing import List, Dict, Optional
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
    QLabel, QRadioButton, QLineEdit, QPushButton, QFileDialog, QTextEdit,
    QProgressBar, QGroupBox, QMessageBox, QCheckBox, QScrollArea, QFrame,
    QSizePolicy, QStackedWidget, QToolBar, QAction, QStatusBar
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSettings, QSize
from PyQt5.QtGui import QTextCursor, QFont, QIcon, QPixmap, QPalette, QColor
import logging
import traceback

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
try:
    from modules.config_loader import CONFIG
    from modules.ad_operations import connect_to_ad, get_domain_guid
    from modules.csv_processing import find_csv_files, process_user_row
    from modules.xml_generation import generate_access_xml, generate_energy_xml
    from modules.logging_config import LogManager
    from modules.csv_processing import get_file_encoding, read_csv_file, write_csv_file
    from modules.ad_operations import get_user_guid
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    QMessageBox.critical(
        None, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏: {e}")
    sys.exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
ACCESS_SUFFIX = CONFIG['output']['access_xml_suffix']
ENERGY_SUFFIX = CONFIG['output']['energy_xml_suffix']
NOT_IN_AD_CSV = CONFIG['output']['not_in_ad_csv']
AD_ENABLED = CONFIG['ad']['enabled']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è UI (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
ui_logger = logging.getLogger("UserCreatorUI")
ui_logger.setLevel(logging.DEBUG)


class Worker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    log_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal()
    error_signal = pyqtSignal(str)

    def __init__(self, mode, ad_password, manual_guid, input_dir):
        super().__init__()
        self.mode = mode
        self.ad_password = ad_password
        self.manual_guid = manual_guid
        self.input_dir = input_dir
        self.logger = logging.getLogger("UserCreatorUI.Worker")

    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞")
            self.log_signal.emit("üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞")

            # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            original_dir = os.getcwd()
            self.logger.debug(f"–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {original_dir}")
            if self.input_dir and os.path.exists(self.input_dir):
                os.chdir(self.input_dir)
                self.logger.info(
                    f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {os.getcwd()}")
            else:
                self.logger.warning(
                    f"–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.input_dir}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è.")
            self.log_signal.emit(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AD (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            ad_conn = None
            ad_guid = None
            not_found_in_ad = []

            if self.mode == 'y' and AD_ENABLED:
                self.logger.info("–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å Active Directory")
                if not self.ad_password:
                    error_msg = "‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å AD!"
                    self.logger.error(error_msg)
                    self.log_signal.emit(error_msg)
                    return
                self.log_signal.emit("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Active Directory...")
                self.logger.info(
                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AD: —Å–µ—Ä–≤–µ—Ä={CONFIG['ad']['domain_controller']}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={CONFIG['ad']['user']}")
                ad_conn = connect_to_ad(self.ad_password)
                if not ad_conn:
                    error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AD."
                    self.logger.error(error_msg)
                    self.log_signal.emit(error_msg)
                    return
                self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Active Directory")
                self.log_signal.emit("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AD")
                self.log_signal.emit("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ GUID –¥–æ–º–µ–Ω–∞...")
                self.logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ GUID –¥–æ–º–µ–Ω–∞...")
                ad_guid = get_domain_guid(ad_conn)
                if not ad_guid:
                    error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GUID –¥–æ–º–µ–Ω–∞."
                    self.logger.error(error_msg)
                    self.log_signal.emit(error_msg)
                    return
                self.logger.info(f"‚úÖ GUID –¥–æ–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {ad_guid}")
                self.log_signal.emit(f"‚úÖ GUID –¥–æ–º–µ–Ω–∞: {ad_guid}")
            else:
                self.logger.info(
                    "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–µ–∑ Active Directory (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ GUID)")
                if not self.manual_guid:
                    error_msg = "‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω GUID –¥–æ–º–µ–Ω–∞!"
                    self.logger.error(error_msg)
                    self.log_signal.emit(error_msg)
                    return
                ad_guid = self.manual_guid.strip()
                self.logger.info(
                    f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–π GUID –¥–æ–º–µ–Ω–∞: {ad_guid}")
                self.log_signal.emit(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GUID: {ad_guid}")

            self.progress_signal.emit(20)
            self.log_signal.emit("üîç –ü–æ–∏—Å–∫ CSV —Ñ–∞–π–ª–æ–≤...")
            self.logger.info("–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤")
            csv_files = find_csv_files()
            if not csv_files:
                warning_msg = "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                self.logger.warning(warning_msg)
                self.log_signal.emit(warning_msg)
                return
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(csv_files)}")
            self.log_signal.emit(
                f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(csv_files)}")

            for i, csv_file in enumerate(csv_files):
                self.logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {csv_file}")

            self.progress_signal.emit(30)
            total_files = len(csv_files)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            for i, csv_file in enumerate(csv_files):
                self.logger.info(
                    f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {i+1}/{total_files}: {csv_file}")
                self.log_signal.emit(
                    f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ({i+1}/{total_files}): {csv_file}")

                try:
                    file_path = os.path.join('.', csv_file)
                    base_name = os.path.splitext(csv_file)[0]
                    self.logger.debug(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")

                    # –°–æ–∑–¥–∞—ë–º LogManager –∏ –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
                    log_manager = LogManager(csv_file)
                    logger = log_manager.get_logger()
                    logger.info(f"üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {csv_file}")

                    if self.mode == 'y' and AD_ENABLED:
                        logger.info(
                            f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GUID –¥–æ–º–µ–Ω–∞ –∏–∑ AD: {ad_guid}")
                    else:
                        logger.info(
                            f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω—ã–π GUID –¥–æ–º–µ–Ω–∞: {ad_guid}")

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —á—Ç–µ–Ω–∏–µ CSV
                    self.logger.debug(
                        f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_path}")
                    encoding = get_file_encoding(file_path)
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}")
                    self.logger.info(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ {csv_file}: {encoding}")
                    self.logger.debug(f"–ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞: {file_path}")
                    rows = read_csv_file(file_path, encoding)
                    logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
                    self.logger.info(
                        f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ {csv_file}")

                    updated_rows = []
                    users_data = []
                    self.logger.debug(
                        f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ {csv_file}")

                    for row_idx, row in enumerate(rows):
                        name = (row.get('name') or '').strip()
                        if not name:
                            logger.debug(
                                f"–°—Ç—Ä–æ–∫–∞ {row_idx + 1}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ø—É—Å—Ç–æ–µ –∏–º—è)")
                            continue
                        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                        processed_row = process_user_row(
                            row,           # row
                            row_idx,       # row_index
                            csv_file,      # csv_file
                            self.mode,     # mode
                            ad_conn,       # ad_conn
                            ad_guid,       # ad_guid
                            not_found_in_ad,  # not_found_in_ad
                            logger         # logger
                        )
                        if processed_row:
                            updated_rows.append(processed_row)
                            users_data.append(processed_row)

                    self.logger.info(
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(users_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞ {csv_file}")
                    self.log_signal.emit(
                        f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(users_data)}")

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML
                    self.logger.info(
                        f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–æ–≤ –¥–ª—è {csv_file}")
                    self.log_signal.emit(f"  üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML —Ñ–∞–π–ª–æ–≤...")
                    sys_xml = generate_access_xml(ad_guid, users_data)
                    energy_xml = generate_energy_xml(users_data)
                    sys_xml_filename = f"{base_name}{ACCESS_SUFFIX}"
                    energy_xml_filename = f"{base_name}{ENERGY_SUFFIX}"
                    self.logger.debug(f"–ó–∞–ø–∏—Å—å Access XML: {sys_xml_filename}")
                    with open(sys_xml_filename, 'w', encoding='utf-8') as f:
                        f.write(sys_xml)
                    self.logger.debug(
                        f"–ó–∞–ø–∏—Å—å Energy XML: {energy_xml_filename}")
                    with open(energy_xml_filename, 'w', encoding='utf-8') as f:
                        f.write(energy_xml)
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã XML-—Ñ–∞–π–ª—ã: "
                                f"{sys_xml_filename}, {energy_xml_filename}")
                    self.logger.info(
                        f"XML —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã: {sys_xml_filename}, {energy_xml_filename}")
                    self.log_signal.emit(
                        f"  ‚úÖ XML —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: {ACCESS_SUFFIX}, {ENERGY_SUFFIX}")

                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å CSV
                    self.logger.debug(f"–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å CSV —Ñ–∞–π–ª–∞: {file_path}")
                    write_csv_file(file_path, updated_rows)
                    logger.info(f"‚úÖ CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {csv_file}")
                    self.logger.info(f"CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {csv_file}")
                    self.log_signal.emit(f"  ‚úÖ CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω")
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ '{csv_file}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    self.logger.info(
                        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {csv_file} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {csv_file}: {str(e)}"
                    self.logger.error(error_msg)
                    self.logger.debug(
                        f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                    self.log_signal.emit(error_msg)
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = 30 + int((i + 1) / total_files * 60)
                self.progress_signal.emit(progress)
                self.logger.debug(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {progress}%")

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ not_in_AD.csv ---
            if self.mode == 'y' and AD_ENABLED and not_found_in_ad:
                self.logger.info(
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ AD: {len(not_found_in_ad)} –∑–∞–ø–∏—Å–µ–π")
                self.log_signal.emit(
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ AD ({len(not_found_in_ad)} –∑–∞–ø–∏—Å–µ–π)...")
                try:
                    not_found_in_ad.sort(key=lambda x: x['login'])
                    with open(NOT_IN_AD_CSV, 'w', newline='', encoding='utf-8') as f:
                        import csv
                        writer = csv.DictWriter(
                            f, fieldnames=['login', 'name', 'person_guid'], delimiter=';')
                        writer.writeheader()
                        writer.writerows(not_found_in_ad)
                    if csv_files:
                        last_logger = logger  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–≥–µ—Ä
                        last_logger.warning(
                            f"üü° –õ–æ–≥–∏–Ω—ã –Ω–µ –∏–∑ AD —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {NOT_IN_AD_CSV}")
                    self.log_signal.emit(
                        f"‚úÖ –õ–æ–≥–∏–Ω—ã –Ω–µ –∏–∑ AD —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {NOT_IN_AD_CSV}")
                    self.logger.info(
                        f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ AD —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {NOT_IN_AD_CSV}")
                except Exception as e:
                    if csv_files:
                        last_logger = logger
                        last_logger.error(
                            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {NOT_IN_AD_CSV}: {e}")
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {NOT_IN_AD_CSV}: {e}"
                    self.logger.error(error_msg)
                    self.logger.debug(
                        f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                    self.log_signal.emit(error_msg)

            success_msg = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            self.logger.info(success_msg)
            self.log_signal.emit(success_msg)
            self.progress_signal.emit(100)
            self.finished_signal.emit()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(original_dir)
            self.logger.info(
                f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {original_dir}")

        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ: {str(e)}"
            self.logger.error(error_msg)
            self.logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            self.error_signal.emit(error_msg)
            self.finished_signal.emit()


class UserCreatorWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger("UserCreatorUI.MainWindow")
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.settings = QSettings('UserCreator', 'GUI')
        self.worker = None
        self.init_ui()
        self.load_settings()
        self.logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
        self.logger.debug("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI")
        self.setWindowTitle("User Creator")
        self.setGeometry(100, 100, 1000, 750)
        self.logger.debug("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞")

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        self.logger.debug("–°–æ–∑–¥–∞–Ω —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç")

        # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        header_layout = QHBoxLayout()
        title_label = QLabel("User Creator")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 10px;
            }
        """)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        main_layout.addLayout(header_layout)

        # --- –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        settings_group.setStyleSheet("""
            QGroupBox {
                font-size: 14px;
                font-weight: bold;
                border: 1px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 1ex;
                padding-top: 10px;
                background-color: #ffffff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #34495e;
            }
        """)
        settings_layout = QVBoxLayout(settings_group)
        settings_layout.setSpacing(10)
        self.logger.debug("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫")

        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode_label = QLabel("–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        mode_label.setStyleSheet("font-weight: normal; color: #34495e;")
        mode_layout = QHBoxLayout()
        self.radio_ad = QRadioButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AD")
        self.radio_manual = QRadioButton("–ë–µ–∑ AD (–≤—Ä—É—á–Ω—É—é)")
        self.radio_manual.setChecked(True)

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not AD_ENABLED:
            self.radio_ad.setEnabled(False)
            self.radio_ad.setToolTip("AD –æ—Ç–∫–ª—é—á–µ–Ω –≤ config.json")
            self.logger.warning("–†–µ–∂–∏–º AD –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        mode_layout.addWidget(mode_label)
        mode_layout.addWidget(self.radio_ad)
        mode_layout.addWidget(self.radio_manual)
        mode_layout.addStretch()
        settings_layout.addLayout(mode_layout)
        self.logger.debug("–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã")

        # –ü–æ–ª—è –¥–ª—è AD
        self.ad_widget = QFrame()
        self.ad_widget.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 6px;
                padding: 10px;
            }
        """)
        self.ad_widget.setFrameStyle(QFrame.StyledPanel)
        ad_layout = QFormLayout(self.ad_widget)
        ad_layout.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
        ad_layout.setHorizontalSpacing(15)
        ad_layout.setVerticalSpacing(10)

        self.ad_password_edit = QLineEdit()
        self.ad_password_edit.setEchoMode(QLineEdit.Password)
        self.ad_password_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                background-color: #ffffff;
            }
            QLineEdit:focus {
                border-color: #3498db;
                outline: none;
            }
        """)
        ad_layout.addRow(QLabel("–ü–∞—Ä–æ–ª—å AD:"), self.ad_password_edit)
        settings_layout.addWidget(self.ad_widget)
        self.logger.debug("–°–æ–∑–¥–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö AD")

        # –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ GUID
        self.manual_guid_widget = QFrame()
        self.manual_guid_widget.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 6px;
                padding: 10px;
            }
        """)
        self.manual_guid_widget.setFrameStyle(QFrame.StyledPanel)
        manual_guid_layout = QFormLayout(self.manual_guid_widget)
        manual_guid_layout.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
        manual_guid_layout.setHorizontalSpacing(15)
        manual_guid_layout.setVerticalSpacing(10)

        self.manual_guid_edit = QLineEdit()
        self.manual_guid_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                background-color: #ffffff;
            }
            QLineEdit:focus {
                border-color: #3498db;
                outline: none;
            }
        """)
        manual_guid_layout.addRow(
            QLabel("GUID –¥–æ–º–µ–Ω–∞:"), self.manual_guid_edit)
        settings_layout.addWidget(self.manual_guid_widget)
        self.logger.debug("–°–æ–∑–¥–∞–Ω—ã –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ GUID")

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs_frame = QFrame()
        dirs_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 6px;
                padding: 10px;
            }
        """)
        dirs_layout = QFormLayout(dirs_frame)
        dirs_layout.setLabelAlignment(Qt.AlignRight | Qt.AlignVCenter)
        dirs_layout.setHorizontalSpacing(15)
        dirs_layout.setVerticalSpacing(10)

        dir_input_layout = QHBoxLayout()
        self.input_dir_edit = QLineEdit(".")
        self.input_dir_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                background-color: #ffffff;
            }
        """)
        self.browse_input_button = QPushButton("–û–±–∑–æ—Ä...")
        self.browse_input_button.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
        """)
        self.browse_input_button.clicked.connect(self.browse_input_directory)
        dir_input_layout.addWidget(self.input_dir_edit)
        dir_input_layout.addWidget(self.browse_input_button)
        dirs_layout.addRow(QLabel("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å CSV:"), dir_input_layout)
        settings_layout.addWidget(dirs_frame)
        self.logger.debug("–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

        main_layout.addWidget(settings_group)

        # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---
        self.run_button = QPushButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
        self.run_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-size: 16px;
                font-weight: bold;
                margin: 10px 0;
            }
            QPushButton:hover {
                background-color: #219653;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.run_button.clicked.connect(self.run_processing)
        main_layout.addWidget(self.run_button)
        self.logger.debug("–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # --- –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏ ---
        progress_group = QGroupBox("–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏")
        progress_group.setStyleSheet("""
            QGroupBox {
                font-size: 14px;
                font-weight: bold;
                border: 1px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 1ex;
                padding-top: 10px;
                background-color: #ffffff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #34495e;
            }
        """)
        progress_layout = QVBoxLayout(progress_group)
        progress_layout.setSpacing(10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                text-align: center;
                background-color: #ecf0f1;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 4px;
            }
        """)
        progress_layout.addWidget(self.progress_bar)
        self.logger.debug("–°–æ–∑–¥–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_container = QWidget()
        log_layout = QVBoxLayout(log_container)
        log_layout.setContentsMargins(0, 0, 0, 0)

        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 1px solid #7f8c8d;
                border-radius: 5px;
                font-family: 'Courier New', monospace;
                font-size: 10pt;
                padding: 10px;
            }
        """)

        log_layout.addWidget(self.log_text)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(log_container)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
            }
            QScrollBar:vertical {
                border: none;
                background: #ecf0f1;
                width: 15px;
                border-radius: 7px;
            }
            QScrollBar::handle:vertical {
                background: #bdc3c7;
                border-radius: 7px;
            }
            QScrollBar::handle:vertical:hover {
                background: #95a5a6;
            }
        """)
        scroll_area.setMinimumHeight(300)
        progress_layout.addWidget(scroll_area)
        main_layout.addWidget(progress_group)
        self.logger.debug("–°–æ–∑–¥–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤")

        # --- –°—Ç–∞—Ç—É—Å –±–∞—Ä ---
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        self.statusBar().setStyleSheet("""
            QStatusBar {
                background-color: #ecf0f1;
                border-top: 1px solid #bdc3c7;
            }
            QLabel {
                color: #34495e;
            }
        """)
        self.logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –±–∞—Ä")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        self.radio_ad.toggled.connect(self.on_mode_change)
        self.radio_manual.toggled.connect(self.on_mode_change)
        self.on_mode_change()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
            QWidget {
                color: #34495e;
                font-family: 'Segoe UI', sans-serif;
                font-size: 11pt;
            }
            QLabel {
                color: #34495e;
            }
            QRadioButton {
                spacing: 5px;
            }
            QRadioButton::indicator {
                width: 16px;
                height: 16px;
            }
            QRadioButton::indicator:unchecked {
                image: url(none);
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
            }
            QRadioButton::indicator:checked {
                image: url(none);
                border: 2px solid #3498db;
                border-radius: 8px;
                background-color: #3498db;
            }
            QGroupBox {
                font-weight: bold;
            }
        """)

        self.logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def on_mode_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
        self.logger.debug("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã")
        if self.radio_ad.isChecked():
            self.ad_widget.setVisible(True)
            self.manual_guid_widget.setVisible(False)
            self.logger.info("–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å AD")
        else:
            self.ad_widget.setVisible(False)
            self.manual_guid_widget.setVisible(True)
            self.logger.info("–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–µ–∑ AD (—Ä—É—á–Ω–æ–π)")

    def browse_input_directory(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        self.logger.debug("–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        dir_path = QFileDialog.getExistingDirectory(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å CSV")
        if dir_path:
            self.input_dir_edit.setText(dir_path)
            self.logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥."""
        self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI –ª–æ–≥: {message}")
        self.log_text.append(message)
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        self.log_text.moveCursor(QTextCursor.End)

    def run_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É."""
        self.logger.info("–ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()
        self.logger.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        mode = 'y' if self.radio_ad.isChecked() else 'n'
        ad_password = self.ad_password_edit.text()
        manual_guid = self.manual_guid_edit.text()
        input_dir = self.input_dir_edit.text()
        self.logger.info(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞: —Ä–µ–∂–∏–º={mode}, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è={input_dir}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if mode == 'y' and AD_ENABLED and not ad_password:
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è AD")
            QMessageBox.warning(
                self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å AD.")
            return
        if mode == 'n' or not AD_ENABLED:
            if not manual_guid:
                self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ GUID")
                QMessageBox.warning(
                    self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ GUID –¥–æ–º–µ–Ω–∞.")
                return
        if not input_dir or not os.path.exists(input_dir):
            self.logger.warning(
                f"–£–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {input_dir}")
            QMessageBox.warning(
                self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å CSV —Ñ–∞–π–ª–∞–º–∏.")
            return

        self.run_button.setEnabled(False)
        self.statusBar().showMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
        self.progress_bar.setValue(0)
        self.log_text.clear()
        self.logger.info("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.worker = Worker(mode, ad_password, manual_guid, input_dir)
        self.worker.log_signal.connect(self.log_message)
        self.worker.progress_signal.connect(self.progress_bar.setValue)
        self.worker.finished_signal.connect(self.on_processing_finished)
        self.worker.error_signal.connect(self.on_processing_error)
        self.worker.start()
        self.logger.info("–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω")

    def on_processing_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        self.logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        self.run_button.setEnabled(True)
        self.statusBar().showMessage("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.log_message("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

    def on_processing_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_message}")
        self.run_button.setEnabled(True)
        self.statusBar().showMessage("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä."""
        self.logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        self.settings.setValue(
            "mode", 'y' if self.radio_ad.isChecked() else 'n')
        self.settings.setValue("input_dir", self.input_dir_edit.text())
        self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞."""
        self.logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        mode = self.settings.value("mode", 'n')
        if mode == 'y' and AD_ENABLED:
            self.radio_ad.setChecked(True)
        else:
            self.radio_manual.setChecked(True)
        input_dir = self.settings.value("input_dir", ".")
        self.input_dir_edit.setText(input_dir)
        self.logger.info(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: —Ä–µ–∂–∏–º={mode}, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è={input_dir}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        if self.worker and self.worker.isRunning():
            self.logger.warning(
                "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞",
                "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                self.worker.terminate()
                self.worker.wait()
                event.accept()
            else:
                self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                event.ignore()
        else:
            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è")
            event.accept()


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–∞—Ç–æ–π
    import datetime
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    ui_log_filename = f"log\\user_creator_ui_{today}.log"

    ui_logger = logging.getLogger("UserCreatorUI")
    ui_logger.setLevel(logging.DEBUG)

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    ui_file_handler = logging.FileHandler(ui_log_filename, encoding='utf-8')
    ui_formatter = logging.Formatter(
        '%(asctime)s [%(levelname)s] [%(name)s:%(lineno)d] - %(message)s')
    ui_file_handler.setFormatter(ui_formatter)
    ui_file_handler.setLevel(logging.DEBUG)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É "UserCreatorUI"
    ui_logger.addHandler(ui_file_handler)

    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(ui_formatter)
    console_handler.setLevel(logging.INFO)
    ui_logger.addHandler(console_handler)

    main_logger = logging.getLogger("UserCreatorUI")
    main_logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è User Creator GUI")

    app = QApplication(sys.argv)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è
    app.setStyle("Fusion")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤ –¥–ª—è Fusion —Å—Ç–∏–ª—è
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(245, 246, 250))
    palette.setColor(QPalette.WindowText, QColor(52, 73, 94))
    palette.setColor(QPalette.Base, QColor(255, 255, 255))
    palette.setColor(QPalette.AlternateBase, QColor(240, 240, 240))
    palette.setColor(QPalette.ToolTipBase, QColor(255, 255, 220))
    palette.setColor(QPalette.ToolTipText, QColor(0, 0, 0))
    palette.setColor(QPalette.Text, QColor(52, 73, 94))
    palette.setColor(QPalette.Button, QColor(236, 240, 241))
    palette.setColor(QPalette.ButtonText, QColor(52, 73, 94))
    palette.setColor(QPalette.BrightText, QColor(255, 255, 255))
    palette.setColor(QPalette.Link, QColor(52, 152, 219))
    palette.setColor(QPalette.Highlight, QColor(52, 152, 219))
    palette.setColor(QPalette.HighlightedText, QColor(255, 255, 255))

    app.setPalette(palette)

    window = UserCreatorWindow()
    window.show()
    main_logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")

    exit_code = app.exec_()
    main_logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    sys.exit(exit_code)


if __name__ == "__main__":
    main()
